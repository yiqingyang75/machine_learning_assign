do.call("complex", list(imag = 1:3))
A <- 2
f <- function(x) print(x^2)
env <- new.env()
assign("A", 10, envir = env)
assign("f", f, envir = env)
f <- function(x) print(x)
f(A)
do.call(f, list(A))                       # 2
do.call("f", list(A))                     # 2
do.call("f", list(A), envir = env)        # 4
do.call(f, list(A), envir = env)          # 2
do.call("f", list(quote(A)), envir = env) # 100, A = 10, f = x^2
do.call(f, list(quote(A)), envir = env)   # 10, A = 10, f = x
as.name("A")
quote(A)
do.call(+,as.list(c(1,2,3,4,5)))
fn = function(a, b, c, d, e) {
return (a + b * c - d / e)
}
fn(1,2,3,4,5)
do.call(fn, as.list(c(1,2,3,4,5)))
do.call("sum", as.list(c(1,2,3,4,5)))
a=c(12,25,3,8)
Reduce("+",a)
1:3 %>% reduce(`+`)
1:10 %>% reduce(`*`)
paste2 <- function(x, y, sep = ".") paste(x, y, sep = sep)
letters[1:4] %>% reduce(paste2)
letters[1:4] %>% reduce2(c("-", ".", "-"), paste2)
library(dplyr)
1:3 %>% reduce(`+`)
1:10 %>% reduce(`*`)
1:3 %>% Reduce(`+`)
paste2 <- function(x, y, sep = ".") paste(x, y, sep = sep)
letters[1:4] %>% reduce(paste2)
letters[1:4] %>% Reduce(paste2)
Reduce("+",a,accumulate=T)
Reduce(`*`, x=list(5,4,3,2), accumulate=TRUE)
i2 <- seq(0,100,by=2)
i3 <- seq(0,100,by=3)
i5 <- seq(0,100,by=5)
Reduce(intersect, x=list(i2,i3,i5), accumulate=TRUE)
mystery_method <- function(x) { function(z) Reduce(function(y, w) w(y), x, z) }
fn <- mystery_method(c(function(x) x + 1, function(x) x * x))
fn(3)
mystery_method <- function(x) { function(z) print(z) }
mystery_method(3)
a=c(12,25,3,8)
Reduce(`*`, x=list(5,4,3,2), accumulate=TRUE)
a=c(12,25,3,8)
Reduce("+",a)
Reduce("+",a,accumulate=T)  # "+"("+"("+"(12,25),3),8)
Reduce(`*`, x=list(5,4,3,2), accumulate=TRUE)
i2 <- seq(0,100,by=2)
i3 <- seq(0,100,by=3)
i5 <- seq(0,100,by=5)
Reduce(intersect, x=list(i2,i3,i5), accumulate=TRUE)
data(mlb)
library(freqparcoord)
install.packages("freqparcoord")
library(freqparcoord)
data(mlb)
data(mlb)
View(mlb)
View(mlb)
xvallm(mlb,5,c(4,6),2/3)
View(mlb)
View(mlb)
# 1. Try doing several runs of the linear and k-NN code in that section, comparing results.
install.packages("freqparcoord")
library(freqparcoord)
data(mlb)
xvalpart = function (data,p){
# proportion p go to train dataset
n = nrow(data)
ntrain = round(p*n) #num of records in training
trainidxs = sample(1:n,ntrain,replace = FALSE) #get the index of training
list (train = data[trainidxs,], valid = data[-trainidxs,])
}
xvallm = function (data, ycol, predvars, p, meanabs = TRUE){
#ycol: column number of resp. var
#predvars: column number of predictors
#p: proportion of trainnign data set
#meanabs: if true, the mean absolute error, othersise, a R list containnign pred., real Y
tmp = xvalpart(data,p) #use xvalpart function to get train and validation
train = trm$train
test = tmp$valid
#fit model to trainning data
trainy = train[,ycol]
trainpreds = train[,predvars]
trainpreds = as.matrix(trainpreds)
lmout = lm(trainy~trainpreds)
#apply fitted model to validation data
validpreds = as.matrix(valid[,predvars])
predy = cbind(1,validpreds) %*% coef (lmout)
realy = valid[,ycol]
if (meanabs) return (mean(abs(predy-realy)))
list (predy = predy, realy = realy)
}
xvallm(mlb,5,c(4,6),2/3)
install.packages("freqparcoord")
data(mlb)
xvalpart = function (data,p){
# proportion p go to train dataset
n = nrow(data)
ntrain = round(p*n) #num of records in training
trainidxs = sample(1:n,ntrain,replace = FALSE) #get the index of training
list (train = data[trainidxs,], valid = data[-trainidxs,])
}
xvallm = function (data, ycol, predvars, p, meanabs = TRUE){
#ycol: column number of resp. var
#predvars: column number of predictors
#p: proportion of trainnign data set
#meanabs: if true, the mean absolute error, othersise, a R list containnign pred., real Y
tmp = xvalpart(data,p) #use xvalpart function to get train and validation
train = trm$train
test = tmp$valid
#fit model to trainning data
trainy = train[,ycol]
trainpreds = train[,predvars]
trainpreds = as.matrix(trainpreds)
lmout = lm(trainy~trainpreds)
#apply fitted model to validation data
validpreds = as.matrix(valid[,predvars])
predy = cbind(1,validpreds) %*% coef (lmout)
realy = valid[,ycol]
if (meanabs) return (mean(abs(predy-realy)))
list (predy = predy, realy = realy)
}
xvallm(mlb,5,c(4,6),2/3)
xvallm = function (data, ycol, predvars, p, meanabs = TRUE){
#ycol: column number of resp. var
#predvars: column number of predictors
#p: proportion of trainnign data set
#meanabs: if true, the mean absolute error, othersise, a R list containnign pred., real Y
tmp = xvalpart(data,p) #use xvalpart function to get train and validation
train = tmp$train
test = tmp$valid
#fit model to trainning data
trainy = train[,ycol]
trainpreds = train[,predvars]
trainpreds = as.matrix(trainpreds)
lmout = lm(trainy~trainpreds)
#apply fitted model to validation data
validpreds = as.matrix(valid[,predvars])
predy = cbind(1,validpreds) %*% coef (lmout)
realy = valid[,ycol]
if (meanabs) return (mean(abs(predy-realy)))
list (predy = predy, realy = realy)
}
xvallm(mlb,5,c(4,6),2/3)
xvallm = function (data, ycol, predvars, p, meanabs = TRUE){
#ycol: column number of resp. var
#predvars: column number of predictors
#p: proportion of trainnign data set
#meanabs: if true, the mean absolute error, othersise, a R list containnign pred., real Y
tmp = xvalpart(data,p) #use xvalpart function to get train and validation
train = tmp$train
valid = tmp$valid
#fit model to trainning data
trainy = train[,ycol]
trainpreds = train[,predvars]
trainpreds = as.matrix(trainpreds)
lmout = lm(trainy~trainpreds)
#apply fitted model to validation data
validpreds = as.matrix(valid[,predvars])
predy = cbind(1,validpreds) %*% coef (lmout)
realy = valid[,ycol]
if (meanabs) return (mean(abs(predy-realy)))
list (predy = predy, realy = realy)
}
xvallm(mlb,5,c(4,6),2/3)
xvallm(mlb,5,c(4,6),2/3)
xvalknn = function (data, ycol, predvars, k, p, meanabs = TRUE) {
data = data[,c(predvars,ycol)]
ycol = length (predvars) + 1
#use xvalpart function to get train and validation
tmp - xvalpart(data,p)
train = tmp$train
valid = tmp$valid
xd = preprocessx(train[,-ycol],k)
kout = knnest(train[,ycol],xd,k)
predy = predict(kout,valid[,-ycol],TRUE)
realy = valid[,ycol]
if (meanabs) return (mean(abs(predy-realy)))
list (predy = predy, realy = realy)
}
library(regtools)
install.packages("regtools")
library(regtools)
set.seed(9999)
xvalknn(mlb,5,c(4,6),25,2/3)
xvalknn = function (data, ycol, predvars, k, p, meanabs = TRUE) {
data = data[,c(predvars,ycol)]
ycol = length (predvars) + 1
#use xvalpart function to get train and validation
tmp = xvalpart(data,p)
train = tmp$train
valid = tmp$valid
xd = preprocessx(train[,-ycol],k)
kout = knnest(train[,ycol],xd,k)
predy = predict(kout,valid[,-ycol],TRUE)
realy = valid[,ycol]
if (meanabs) return (mean(abs(predy-realy)))
list (predy = predy, realy = realy)
}
xvalknn(mlb,5,c(4,6),25,2/3)
preprocessx = function (x,kmax,xval = FALSE){
reasult$x = x
tmp = FNN::get.knnx(data = x, query = x, k = kmax+xval) #fast knn search
nni = tmp$nn.index
result$indxs = nni[,(1+xval):ncol(nni)]
result$xval = xval
result$kmax = kmax
class(result) = 'preknn'
result
}
xvalknn = function (data, ycol, predvars, k, p, meanabs = TRUE) {
data = data[,c(predvars,ycol)]
ycol = length (predvars) + 1
#use xvalpart function to get train and validation
tmp = xvalpart(data,p)
train = tmp$train
valid = tmp$valid
xd = preprocessx(train[,-ycol],k)
kout = knnest(train[,ycol],xd,k)
predy = predict(kout,valid[,-ycol],TRUE)
realy = valid[,ycol]
if (meanabs) return (mean(abs(predy-realy)))
list (predy = predy, realy = realy)
}
xvalknn(mlb,5,c(4,6),25,2/3)
preprocessx = function (x,kmax,xval = FALSE){
result$x = x
tmp = FNN::get.knnx(data = x, query = x, k = kmax+xval) #fast knn search
nni = tmp$nn.index
result$indxs = nni[,(1+xval):ncol(nni)]
result$xval = xval
result$kmax = kmax
class(result) = 'preknn'
result
}
xvalknn = function (data, ycol, predvars, k, p, meanabs = TRUE) {
data = data[,c(predvars,ycol)]
ycol = length (predvars) + 1
#use xvalpart function to get train and validation
tmp = xvalpart(data,p)
train = tmp$train
valid = tmp$valid
xd = preprocessx(train[,-ycol],k)
kout = knnest(train[,ycol],xd,k)
predy = predict(kout,valid[,-ycol],TRUE)
realy = valid[,ycol]
if (meanabs) return (mean(abs(predy-realy)))
list (predy = predy, realy = realy)
}
xvalknn(mlb,5,c(4,6),25,2/3)
preprocessx <− function(x,kmax,xval=FALSE) { result$x <− x
tmp <− FNN::get.knnx(data=x, query=x, k=kmax+xval) nni <− tmp$nn.index
result$idxs <− nni[,(1+xval):ncol(nni)]
result$xval <− xval
result$kmax <− kmax class(result) <− ’preknn’ result
}
preprocessx = function(x,kmax,xval=FALSE) {
result$x = x
tmp = FNN::get.knnx(data=x, query=x, k=kmax+xval) nni = tmp$nn.index
result$idxs = nni[,(1+xval):ncol(nni)]
result$xval = xval
result$kmax = kmax class(result) = ’preknn’ result
}
xvalknn = function (data, ycol, predvars, k, p, meanabs = TRUE) {
data = data[,c(predvars,ycol)]
ycol = length (predvars) + 1
#use xvalpart function to get train and validation
tmp = xvalpart(data,p)
train = tmp$train
valid = tmp$valid
xd = preprocessx(train[,-ycol],k)
kout = knnest(train[,ycol],xd,k)
predy = predict(kout,valid[,-ycol],TRUE)
realy = valid[,ycol]
if (meanabs) return (mean(abs(predy-realy)))
list (predy = predy, realy = realy)
}
xvalknn(mlb,5,c(4,6),25,2/3)
preprocessx = function(x,kmax,xval=FALSE) {
result$x = x
tmp = FNN::get.knnx(data=x, query=x, k=kmax+xval)
nni = tmp$nn.index
result$idxs = nni[,(1+xval):ncol(nni)]
result$xval = xval
result$kmax = kmax
class(result) = 'preknn'
result
}
xvalknn = function (data, ycol, predvars, k, p, meanabs = TRUE) {
data = data[,c(predvars,ycol)]
ycol = length (predvars) + 1
#use xvalpart function to get train and validation
tmp = xvalpart(data,p)
train = tmp$train
valid = tmp$valid
xd = preprocessx(train[,-ycol],k)
kout = knnest(train[,ycol],xd,k)
predy = predict(kout,valid[,-ycol],TRUE)
realy = valid[,ycol]
if (meanabs) return (mean(abs(predy-realy)))
list (predy = predy, realy = realy)
}
xvalknn(mlb,5,c(4,6),25,2/3)
preprocessx = function(x,kmax,xval=FALSE) {
result = data.frame()
result$x = x
tmp = FNN::get.knnx(data=x, query=x, k=kmax+xval)
nni = tmp$nn.index
result$idxs = nni[,(1+xval):ncol(nni)]
result$xval = xval
result$kmax = kmax
class(result) = 'preknn'
result
}
xvalknn = function (data, ycol, predvars, k, p, meanabs = TRUE) {
data = data[,c(predvars,ycol)]
ycol = length (predvars) + 1
#use xvalpart function to get train and validation
tmp = xvalpart(data,p)
train = tmp$train
valid = tmp$valid
xd = preprocessx(train[,-ycol],k)
kout = knnest(train[,ycol],xd,k)
predy = predict(kout,valid[,-ycol],TRUE)
realy = valid[,ycol]
if (meanabs) return (mean(abs(predy-realy)))
list (predy = predy, realy = realy)
}
xvalknn(mlb,5,c(4,6),25,2/3)
preprocessx = function(x,kmax,xval=FALSE) {
result = data.frame(x = numeric())
result$x = x
tmp = FNN::get.knnx(data=x, query=x, k=kmax+xval)
nni = tmp$nn.index
result$idxs = nni[,(1+xval):ncol(nni)]
result$xval = xval
result$kmax = kmax
class(result) = 'preknn'
result
}
xvalknn = function (data, ycol, predvars, k, p, meanabs = TRUE) {
data = data[,c(predvars,ycol)]
ycol = length (predvars) + 1
#use xvalpart function to get train and validation
tmp = xvalpart(data,p)
train = tmp$train
valid = tmp$valid
xd = preprocessx(train[,-ycol],k)
kout = knnest(train[,ycol],xd,k)
predy = predict(kout,valid[,-ycol],TRUE)
realy = valid[,ycol]
if (meanabs) return (mean(abs(predy-realy)))
list (predy = predy, realy = realy)
}
set.seed(9999)
xvalknn(mlb,5,c(4,6),25,2/3)
result = data.frame(x = numeric())
View(result)
View(result)
mlb[,-1]
mlb[,-5]
result$x = mlb[,-5]
data ( prgeng )
View(prgeng)
View(prgeng)
prgeng$age2 = prgeng$ageˆ2
edu = prgeng$educ
prgeng$ms = as.integer(edu == 14)
prgeng$phd = as.integer(edu == 16)
prgeng$fem = prgeng$sex - 1
tmp = prgeng[edu >= 13,]
pe = tmp[ ,c(1 ,12 ,9 ,13 ,14 ,15 ,8)]
pe = as.matrix(pe)
pe = tmp[ ,c(1 ,12 ,9 ,13 ,14 ,15 ,8)]
data (prgeng)
prgeng$age2 = prgeng$ageˆ2
edu = prgeng$educ
prgeng$ms = as.integer(edu == 14)
prgeng$phd = as.integer(edu == 16)
data (prgeng)
prgeng$age2 = prgeng$age^2
edu = prgeng$educ
prgeng$ms = as.integer(edu == 14)
prgeng$phd = as.integer(edu == 16)
prgeng$fem = prgeng$sex - 1
tmp = prgeng[edu >= 13,]
pe = tmp[ ,c(1 ,12 ,9 ,13 ,14 ,15 ,8)]
pe = as.matrix(pe)
prgeng$agefem = prgeng$age*prgeng$fem
prgeng$age2fem = prgeng$age2*prgeng$fem
lm(wageinc ~ age + age2 + wkswrkd + ms + phd + fem + agefem + age2fem, data = prgng)
lm(wageinc ~ age + age2 + wkswrkd + ms + phd + fem + agefem + age2fem, data = prgeng)
model = lm(wageinc ~ age + age2 + wkswrkd + ms + phd + fem + agefem + age2fem, data = prgeng)
summary(model)
View(prgeng)
View(prgeng)
prgeng[prgeng$age == 32,]
prgeng[prgeng$age == 32,]
record = c(32, 32^2,52,1,0,1,32*1,32^2*1)
predict(model,newdata = record)
record = data.frame(age = 32, age2 = 32^2, wkswrkd = 52, ms = 1, phd = 0, fem = 1, agefem = 32*1, age2fem = 32^2*1)
View(record)
View(record)
predict(model,newdata = record)
library(freqparcoord)
library(regtools)
data(mlb)
xvalknn <- function(data,ycol ,predvars ,k,p,meanabs=TRUE){
# cull out just Y and the Xs
data <- data[, c(predvars, ycol)]
ycol <- length(predvars) + 1
tmp <- xvalpart(data,p)
train <- tmp$train
valid <- tmp$valid
valid <- as.matrix(valid)
xd <- preprocessx(train[,-ycol],k)
kout <- knnest(train[,ycol],xd,k)
predy <- predict(kout, valid[, -ycol], TRUE)
realy <- valid[, ycol]
if (meanabs) return(mean(abs(predy - realy)))
list (predy = predy , realy = realy)
}
knn_result <- round(xvalknn(bodyfat, 7, c(6,8), 5, 4/5),3)
xvalknn(mlb,5,c(4,6),25,2/3)
setwd("C:/Users/yiqin/Dropbox/UCD/18Winter/452 Machine Learning/assignemnt")
bodyfat <- read.csv("bodyfat.csv")
knn_result <- round(xvalknn(bodyfat, 7, c(6,8), 5, 4/5),3)
xvalknn = function (data, ycol, predvars, k, p, meanabs = TRUE) {
data = data[,c(predvars,ycol)]
ycol = length (predvars) + 1
#use xvalpart function to get train and validation
tmp = xvalpart(data,p)
train = tmp$train
valid = tmp$valid
xd = preprocessx(train[,-ycol],k)
kout = knnest(train[,ycol],xd,k)
predy = predict(kout,valid[,-ycol],TRUE)
realy = valid[,ycol]
if (meanabs) return (mean(abs(predy-realy)))
list (predy = predy, realy = realy)
}
xvalknn(mlb,5,c(4,6),25,2/3)
knn_result <- round(xvalknn(bodyfat, 7, c(6,8), 5, 4/5),3)
?preprocessx
#####################
######Question1######
#####################
library(freqparcoord)
bodyfat <- read.csv(“bodyfat.csv”)
# Linear Model
xvalpart <- function(data, p){
n <- nrow(bodyfat)
ntrain <- round(p*n)
trainidxs <- sample(1:n, ntrain, replace=FALSE)
list(train=data[trainidxs ,],valid=data[-trainidxs,])
}
xvallm <- function(data, ycol, predvars, p, meanabs=TRUE){
tmp <- xvalpart(data,p)
train <- tmp$train
valid <- tmp$valid
trainy <- train[, ycol]
trainpreds <- train[, predvars]
trainpreds <- as.matrix(trainpreds)
lmout <- lm(trainy ~ trainpreds)
validpreds <- as.matrix(valid[, predvars])
predy <- cbind(1, validpreds) %*% coef(lmout)
realy <- valid[, ycol]
if (meanabs) return(mean(abs(predy - realy)))
list(predy = predy, realy = realy)
}
lm_result <- round(xvallm(bodyfat, 7, c(6,8), 4/5),3)
# KNN Case
xvalknn <- function(data,ycol ,predvars ,k,p,meanabs=TRUE){
# cull out just Y and the Xs
data <- data[, c(predvars, ycol)]
ycol <- length(predvars) + 1
tmp <- xvalpart(data,p)
train <- tmp$train
valid <- tmp$valid
valid <- as.matrix(valid)
xd <- preprocessx(train[,-ycol],k)
kout <- knnest(train[,ycol],xd,k)
predy <- predict(kout, valid[, -ycol], TRUE)
realy <- valid[, ycol]
if (meanabs) return(mean(abs(predy - realy)))
list (predy = predy , realy = realy)
}
library(regtools)
knn_result <- round(xvalknn(bodyfat, 7, c(6,8), 5, 4/5),3)
print(paste(“Linear model result:“, lm_result))
print(paste(“KNN model result:“, knn_result))
knn_result <- round(xvalknn(bodyfat, 7, c(6,8), 5, 4/5),3)
View(bodyfat)
View(bodyfat)
View(mlb)
View(mlb)
bodyfat = read.csv("bodyfat.csv")
lm_model = lm(densiy ~ age + weight + height + neck + chest + abdomen + hip + thigh + knee + ankle + biceps + forearm + wrist, data = bodyfast)
lm_model = lm(densiy ~ age + weight + height + neck + chest + abdomen + hip + thigh + knee + ankle + biceps + forearm + wrist, data = bodyfat)
lm_model = lm(density ~ age + weight + height + neck + chest + abdomen + hip + thigh + knee + ankle + biceps + forearm + wrist, data = bodyfat)
summary(lm_model)
mean(bodyfat$height)
library(freqparcoord)
library(regtools)
